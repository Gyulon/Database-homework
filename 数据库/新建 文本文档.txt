create table businesses
(
    id       int auto_increment
        primary key,
    name     varchar(40)                not null,
    turnover double(16, 2) default 0.00 not null,
    phone    varchar(16)                not null,
    address  varchar(45)                not null
);

create table customers
(
    id          int auto_increment
        primary key,
    name        varchar(40)                not null,
    consumption double(16, 2) default 0.00 not null,
    phone       varchar(16)                not null,
    address     varchar(45)                not null
);

create table goods
(
    id          int auto_increment
        primary key,
    name        varchar(40)   not null,
    business_id int           not null,
    price       double(16, 2) not null,
    limit_num   int           null,
    constraint goods_ibfk_1
        foreign key (business_id) references businesses (id)
);

create index business_id
    on goods (business_id);

create table orders
(
    id          int auto_increment
        primary key,
    order_time  datetime      not null,
    customer_id int           not null,
    goods_id    int           not null,
    number      int           not null,
    total_cost  double(16, 2) not null,
    state       int default 0 not null,
    constraint orders_ibfk_1
        foreign key (customer_id) references customers (id),
    constraint orders_ibfk_2
        foreign key (goods_id) references goods (id)
);

create index goods_id
    on orders (goods_id);

create index idx_orders_customer_id
    on orders (customer_id);

create definer = root@localhost trigger calculate_consumption
    after insert
    on orders
    for each row
BEGIN
    UPDATE customers
      SET consumption=consumption+NEW.total_cost
    WHERE customers.id=NEW.customer_id;
  END;

create definer = root@localhost trigger calculate_turnover
    before update
    on orders
    for each row
BEGIN
    IF (NEW.state=1 AND OLD.state=0) THEN
      UPDATE businesses
        SET turnover=turnover+OLD.total_cost
      WHERE id=(SELECT business_id FROM goods WHERE goods.id=NEW.goods_id);
    ELSEIF (NEW.state=3 AND OLD.state=0) THEN
      UPDATE customers
      SET consumption=consumption-OLD.total_cost
      WHERE id=OLD.customer_id;
    ELSEIF (NEW.state<OLD.state) THEN
      SET NEW.state=OLD.state;
    END IF ;
  END;

create definer = root@localhost trigger limit_buy
    before insert
    on orders
    for each row
BEGIN
    DECLARE p DOUBLE(16,2);  /*商品单价*/
    DECLARE lim INT;  /*限购数量*/
    SET p=(SELECT price FROM goods WHERE goods.id=NEW.goods_id);
    SET lim=(SELECT limit_num FROM goods WHERE goods.id=NEW.goods_id);
    if (lim IS NOT NULL AND NEW.number>lim) THEN
      SET NEW.number=lim;
    END IF ;
    SET NEW.total_cost=NEW.number*p;
  END;

create definer = root@localhost view order_details as
select `km`.`orders`.`id`         AS `订单编号`,
       `km`.`businesses`.`name`   AS `商家名称`,
       `km`.`goods`.`name`        AS `商品名称`,
       `km`.`orders`.`number`     AS `数量`,
       `km`.`orders`.`total_cost` AS `总额`,
       `km`.`orders`.`state`      AS `订单状态`,
       `km`.`customers`.`name`    AS `客户姓名`,
       `km`.`customers`.`phone`   AS `电话`,
       `km`.`customers`.`address` AS `地址`,
       `km`.`orders`.`order_time` AS `时间`
from (((`km`.`businesses` join `km`.`goods`
        on ((`km`.`businesses`.`id` = `km`.`goods`.`business_id`))) join `km`.`orders`
       on ((`km`.`goods`.`id` = `km`.`orders`.`goods_id`))) join `km`.`customers`
      on ((`km`.`orders`.`customer_id` = `km`.`customers`.`id`)));

create definer = root@localhost view view_daily_business_revenue as
select cast(`km`.`orders`.`order_time` as date) AS `order_date`,
       `km`.`businesses`.`name`                 AS `business_name`,
       sum(`km`.`orders`.`total_cost`)          AS `daily_total_revenue`
from ((`km`.`orders` join `km`.`goods` on ((`km`.`orders`.`goods_id` = `km`.`goods`.`id`))) join `km`.`businesses`
      on ((`km`.`goods`.`business_id` = `km`.`businesses`.`id`)))
where (`km`.`orders`.`state` in (1, 2))
group by cast(`km`.`orders`.`order_time` as date), `km`.`businesses`.`name`
order by cast(`km`.`orders`.`order_time` as date) desc, `daily_total_revenue` desc;

